include <LiquidCrystal_I2C.h>
#include <SoftwareSerial.h>

#include "DHT.h"
#include "DHT.h"
#define DHTTYPE DHT11  
#define DHTPIN 4  
#define FAN_PIN 9
#define echoPin 12 
#define trigPin 11 
#define PUMP 8
#define PH_SENSOR  A1 
#define BATTERY_MONITOR_PIN A2
#define RAIN_SENSOR 10

float temperature =0;
float humidity =0;
float uppersetpoint= 27;
float lowersetpoint= 20;
float battery_voltage = 0;
float phValue =0;
unsigned long int avgValue;  //Store the average value of the sensor feedback
float b;
int buf[10],temp;
bool fan_state = 0;
bool pump_state = 0;

uint8_t ssRX = 2;
uint8_t ssTX = 3;

SoftwareSerial Bluetooth(ssRX, ssTX);

// ultrasonic
long duration; // variable for the duration of sound wave travel
int distance; // variable for the distance measurement
DHT dht(DHTPIN, DHTTYPE);

LiquidCrystal_I2C lcd(0x27,20,4);  // set the LCD address to 0x27 for a 16 chars and 2 line display

void setup() {

   lcd.init(); 
   Bluetooth.begin(9600);
   Serial.begin(9600);
   Serial.println(F("DHTxx test!"));
   pinMode(FAN_PIN, OUTPUT);
   digitalWrite(FAN_PIN,HIGH);
   pinMode(PUMP, OUTPUT);
   digitalWrite(PUMP,HIGH);
   pinMode (RAIN_SENSOR,INPUT);
    
  dht.begin();sn
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an OUTPUT
  pinMode(echoPin, INPUT); // Sets the echoPin as an INPUT
  Serial.println("Ultrasonic Sensor HC-SR04 Test"); // print some text in Serial Monitor
  Serial.println("with Arduino UNO R3");

 // Print a message to the LCD.
  lcd.backlight();
  lcd.setCursor(3,0);
  lcd.print("Hydroponic");
  lcd.setCursor(2,1);
  lcd.print("System!");
}
void loop() {
  
    read_temp_hum();
    // fan control logic
    if (temperature > uppersetpoint){
      digitalWrite(FAN_PIN,LOW);
    // Serial.println("FAN ON");
     fan_state=1;
    }
    if (temperature < lowersetpoint){
      digitalWrite(FAN_PIN,HIGH);
     // Serial.println("Fan OFF");
      fan_state=0;
    }
    // Pump is on all the time 
    digitalWrite(PUMP,LOW);// relay is active low
   // Serial.println("Pump ON");

    if (digitalRead(RAIN_SENSOR)== 0)
    { 
    //  Serial.println("Pump OFF"); 
        pump_state = 1;
    }
    else{
     //  Serial.println("Pump ON"); 
         pump_state = 0;
    }
    
    read_water_level();
    Read_ph_data();
    print_data();
    Json_payload();
    
battery_voltage= ReadVoltage( BATTERY_MONITOR_PIN);
}
void read_temp_hum()
{
  // Wait a few seconds between measurements.
  delay(2000);
float h = dht.readHumidity();
 humidity=h;
  // Read temperature as Celsius (the default)
  float t = dht.readTemperature();
  temperature= t;
  float f = dht.readTemperature(true);
 
  // Check if any reads failed and exit early (to try again).
  if (isnan(h) || isnan(t) || isnan(f)) {
    Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }
  float hif = dht.computeHeatIndex(f, h); 
  float hic = dht.computeHeatIndex(t, h, false);


  }
//***********************************************************************
// function to read ultrasonic sensor
//**********************************************************************
void read_water_level()
{ 
  // Clears the trigPin condition
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin HIGH (ACTIVE) for 10 microseconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  // Calculating the distance
  distance = duration * 0.034 / 2; // Speed of sound wave divided by 2 (go and back)
  // Displays the distance on the Serial Monitor
  delay(1000);
}
//***********************************************************************
// function to read pH sensor
//**********************************************************************
void Read_ph_data()
{
  for(int i=0;i<10;i++)       //Get 10 sample value from the sensor for smooth the value
  {
    buf[i]=analogRead(PH_SENSOR);
    delay(10);
  }
  for(int i=0;i<9;i++)        //sort the analog from small to large
  {
  for(int j=i+1;j<10;j++)
    {
  if(buf[i]>buf[j]){
        temp=buf[i];
        buf[i]=buf[j];
        buf[j]=temp;
      }
    }
  }
  avgValue=0;
  for(int i=2;i<8;i++)                      //take the average value of 6 center sample
  avgValue+=buf[i];
  phValue=(float)avgValue*5.0/1024/6; //convert the analog into millivolt
  phValue=3.5*phValue;                      //convert the millivolt into pH value

//  Serial.print("    pH:");  
//  Serial.print(phValue,2);
//  Serial.println(" ");

}

//***********************************************************************
// function to read battery monitor
//**********************************************************************

float ReadVoltage(int Batt_Monitor )
{

 
  float val = analogRead(Batt_Monitor);
  float volt = val*100/750;  // Maps Readings For zero to 300 displayed values. 
  return volt;
}
//************************************************************
// Function to print data on screen
//************************************************************
void print_data()
{
    Serial.print("Temperature in Â°C  : "); Serial.println(temperature);
    Serial.print("Humidity in %   : "); Serial.println(humidity);
    Serial.print("pH value  : "); Serial.println(phValue);
    Serial.print("Voltage : "); Serial.println(battery_voltage);
    Serial.print("Distance in cm:  "); Serial.println(distance);
    //Serial.print("Motion  : "); Serial.println(motion_state);
    Serial.println();
}
void Json_payload()
{
  // Prepare a JSON payload string
  String payload = "{";
    payload += "\"Temp\":"; payload += temperature; payload += ",";
    payload += "\"Hum\":"; payload += humidity; payload += ",";
    payload += "\"pH \":"; payload += phValue; payload += ",";
    payload += "\"Voltage\":"; payload += battery_voltage; payload += ",";
    payload += "\"Distance\":"; payload += distance; payload += ",";
    payload += "\"pump\":"; payload += pump_state; payload += ",";
    payload += "\"fan\":"; payload += fan_state; 
    payload += "}";

  // Send payload
  char attributes[100];
  payload.toCharArray( attributes, 100 );
  Serial.println( attributes );
 Bluetooth.println(attributes); // writing data to bluetooth
}
